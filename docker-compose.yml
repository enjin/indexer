services:
  indexer_db:
    container_name: indexer_db
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - indexer_db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: [
      "postgres",
      "-c", "max_connections=200"
    ]

  indexer_redis:
    container_name: indexer_redis
    image: redis:7.0
    restart: on-failure
    volumes:
      - redis_db:/data
    ports:
      - "6379:6379"

  indexer_processor:
    container_name: indexer_processor
    restart: unless-stopped
    image: ghcr.io/enjin/indexer:${VERSION:-latest}
    environment:
      CONTAINER_ROLE: processor
    build:
      context: .
      args:
        SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}
    volumes:
      - .env:/app/.env
    depends_on:
      - indexer_db
      - indexer_worker

#  indexer_hasura:
#    container_name: indexer_hasura
#    restart: unless-stopped
#    image: hasura/graphql-engine:latest
#    env_file:
#      - .env
#    environment:
#      HASURA_GRAPHQL_DATABASE_URL: "postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:5432/${DB_NAME}"
#      HASURA_GRAPHQL_ENABLE_SUBSCRIPTIONS: true
#      HASURA_GRAPHQL_ENABLE_CONSOLE: true
#      HASURA_GRAPHQL_DEV_MODE: true
#      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log
#    ports:
#      - "8080:8080"
#    depends_on:
#      - indexer_db
#      - indexer_processor

  indexer_graphql:
    container_name: indexer_graphql
    restart: unless-stopped
    image: ghcr.io/enjin/indexer:${VERSION:-latest}
    environment:
      CONTAINER_ROLE: graphql
    build:
      context: .
    ports:
      - "4000:4000"
      - "8080:8080"
    volumes:
      - .env:/app/.env
    depends_on:
      - indexer_db
#      - indexer_processor

  indexer_worker:
    container_name: indexer_worker
    restart: unless-stopped
    image: ghcr.io/enjin/indexer:${VERSION:-latest}
    environment:
      CONTAINER_ROLE: worker
    build:
      context: .
    ports:
      - "9090:9090"
    volumes:
      - .env:/app/.env
    depends_on:
      - indexer_db
      - indexer_redis

#  indexer_jaeger:
#    container_name: indexer_jaeger
#    image: jaegertracing/all-in-one:latest
#    restart: unless-stopped
#    ports:
#      - '4318:4318'
#      - '16686:16686'

volumes:
  indexer_db:
  redis_db:
