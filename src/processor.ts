import { SubstrateBatchProcessor } from '@subsquid/substrate-processor'
import config from './config'
import { events, calls } from './types/generated'

export const processor = new SubstrateBatchProcessor()
    .setRpcEndpoint(config.dataSource.chain)
    .setBlockRange({ from: config.dataSource.fromBlock })
    .addCall({
        name: [calls.identity.setSubs.name, calls.identity.renameSub.name],
        stack: true,
    })
    .addEvent({
        name: [
            events.multiTokens.collectionCreated.name,
            events.multiTokens.collectionDestroyed.name,
            events.multiTokens.collectionMutated.name,
            events.multiTokens.collectionTransferred.name,
            events.multiTokens.collectionAccountCreated.name,
            events.multiTokens.collectionAccountDestroyed.name,
            events.multiTokens.tokenCreated.name,
            events.multiTokens.tokenDestroyed.name,
            events.multiTokens.tokenMutated.name,
            events.multiTokens.tokenAccountCreated.name,
            events.multiTokens.tokenAccountDestroyed.name,
            events.multiTokens.infused.name,
            events.multiTokens.minted.name,
            events.multiTokens.burned.name,
            events.multiTokens.attributeSet.name,
            events.multiTokens.attributeRemoved.name,
            events.multiTokens.frozen.name,
            events.multiTokens.thawed.name,
            events.multiTokens.approved.name,
            events.multiTokens.reserved.name,
            events.multiTokens.unapproved.name,
            events.multiTokens.unreserved.name,
            events.multiTokens.transferred.name,
            events.multiTokens.claimedCollections.name,
            events.multiTokens.claimTokensInitiated.name,
            events.multiTokens.claimTokensCompleted.name,
            events.balances.balanceSet.name,
            events.balances.burned.name,
            events.balances.deposit.name,
            events.balances.dustLost.name,
            events.balances.endowed.name,
            events.balances.frozen.name,
            events.balances.locked.name,
            events.balances.minted.name,
            events.balances.reserveRepatriated.name,
            events.balances.reserved.name,
            events.balances.restored.name,
            events.balances.slashed.name,
            events.balances.suspended.name,
            events.balances.thawed.name,
            events.balances.transfer.name,
            events.balances.unlocked.name,
            events.balances.unreserved.name,
            events.balances.withdraw.name,
            events.claims.claimed.name,
            events.claims.claimRequested.name,
            events.claims.delayTimeForClaimSet.name,
            events.claims.exchangeRateSet.name,
            events.claims.claimRejected.name,
            events.claims.claimMinted.name,
            events.marketplace.listingCreated.name,
            events.marketplace.listingCancelled.name,
            events.marketplace.listingFilled.name,
            events.marketplace.bidPlaced.name,
            events.marketplace.auctionFinalized.name,
            events.marketplace.counterOfferPlaced.name,
            events.marketplace.counterOfferAnswered.name,
            events.marketplace.counterOfferRemoved.name,
            events.polkadotXcm.attempted.name,
            events.fuelTanks.accountAdded.name,
            events.fuelTanks.accountRemoved.name,
            events.fuelTanks.accountRuleDataRemoved.name,
            events.fuelTanks.freezeStateMutated.name,
            events.fuelTanks.fuelTankCreated.name,
            events.fuelTanks.fuelTankDestroyed.name,
            events.fuelTanks.fuelTankMutated.name,
            events.fuelTanks.ruleSetInserted.name,
            events.fuelTanks.ruleSetRemoved.name,
            events.identity.identityCleared.name,
            events.identity.identityKilled.name,
            events.identity.identitySet.name,
            events.identity.judgementGiven.name,
            events.identity.judgementRequested.name,
            events.identity.judgementUnrequested.name,
            events.identity.registrarAdded.name,
            events.identity.subIdentityAdded.name,
            events.identity.subIdentityRemoved.name,
            events.identity.subIdentityRevoked.name,
        ],
        extrinsic: true,
        stack: true,
        call: true,
    })
    .setFields({
        block: {
            timestamp: true,
            validator: true,
        },
        call: {
            origin: true,
            success: true,
            args: true,
            name: true,
            error: true,
        },
        extrinsic: {
            fee: true,
            hash: true,
            tip: true,
            signature: true,
            version: true,
            success: true,
            error: true,
            name: true,
        },
    })

if (config.dataSource.archive) {
    processor.setGateway(config.dataSource.archive)
}
